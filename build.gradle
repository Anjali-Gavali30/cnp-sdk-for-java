apply plugin : 'java'
apply plugin : 'eclipse'

def opensftp = "lib/opensftp-0.3.0"
def versionSchema = "8.25"
def versionJar = "8.25.3"
def dist15 = "$buildDir/dist/java15"

repositories {
    mavenCentral()
}

configurations {
    functionalTestCompile.extendsFrom testCompile
    functionalTestCompile.extendsFrom testRuntime
    certificationTestCompile.extendsFrom testCompile
    certificationTestCompile.extendsFrom testRuntime
}

sourceSets {
    main{
        java{
            srcDirs += "$buildDir/generated"
        }
    }
    functionalTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            compileClasspath += test.output
            runtimeClasspath += test.output
        }
    }
    certificationTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            compileClasspath += test.output
            runtimeClasspath += test.output
        }
    }
}

dependencies{
    compile group:'org.apache.directory.studio', name:'org.apache.commons.codec', version:'1.6'
    compile group:'org.apache.httpcomponents', name:'fluent-hc', version:'4.2.3'
    compile group:'org.apache.httpcomponents', name:'httpclient', version:'4.2.3'
    compile group:'org.apache.httpcomponents', name:'httpclient-cache', version:'4.2.3'
    compile group:'org.apache.httpcomponents', name:'httpcore', version:'4.2.2'
    compile group:'org.apache.httpcomponents', name:'httpmime', version:'4.2.3'
    compile group:'commons-logging', name:'commons-logging', version:'1.1.1'
    compile group:'javax.activation', name:'activation', version:'1.1.1'
    compile group:'javax.xml.bind', name:'jaxb-api', version:'2.2.6'
    compile group:'com.sun.xml.bind', name:'jaxb-impl', version:'2.2.5'
    compile group:'javax.xml.bind', name:'jsr173_api', version:'1.0'
    compile fileTree(dir:"${opensftp}", include: '**/*.jar')
    runtime group:'com.sun.xml.bind', name:'jaxb-xjc', version:'2.2.5'
    testCompile group:'junit', name:'junit', version:'4.11'
    testCompile group:'org.mockito', name:'mockito-all', version:'1.9.5'
}

clean {
    delete 'test'
}


task copyXsd (type: Copy, dependsOn:clean) {
    def jaxbTargetDir = file('build/generated')
    jaxbTargetDir.mkdirs()
    from ('src/main/resources/xsd') {
        include '*.xsd'
    }
    into jaxbTargetDir
}

task replaceRegexp(dependsOn: 'copyXsd') << {
    ant.replaceregexp(file:"build/generated/litleTransaction_v${versionSchema}.xsd", match:"(attributeFormDefault=\"unqualified\")>", replace:"\\1 xmlns:jaxb=\"http://java.sun.com/xml/ns/jaxb\" jaxb:version=\"2.0\">", byline:true)
    ant.replaceregexp(file:"build/generated/litleCommon_v${versionSchema}.xsd", match:"(elementFormDefault=\"qualified\")>", replace:"\\1 xmlns:jaxb=\"http://java.sun.com/xml/ns/jaxb\" jaxb:version=\"2.0\">", byline:true)
    ant.replaceregexp(file:"build/generated/litleTransaction_v${versionSchema}.xsd", match:"transaction\" type=\"xp:transactionType\" abstract=\"true\"/>", replace:"transaction\" type=\"xp:transactionType\" abstract=\"true\"/>    \n\n    <xs:complexType name=\"litleTransactionInterface\" abstract=\"true\"/>", byline:true)
    ant.replaceregexp(file:"build/generated/litleTransaction_v${versionSchema}.xsd", match:"name=\"transactionType\">", replace:"name=\"transactionType\">    \n        <xs:complexContent>    \n            <xs:extension base=\"xp:litleTransactionInterface\">", byline:true)
    ant.replaceregexp(file:"build/generated/litleTransaction_v${versionSchema}.xsd", match:"<xs:attribute name=\"id\" type=\"xp:string25Type\"/>", replace:"       <xs:attribute name=\"id\" type=\"xp:string25Type\"/>", byline:true)
    ant.replaceregexp(file:"build/generated/litleTransaction_v${versionSchema}.xsd", match:"<xs:attribute name=\"customerId\" type=\"xp:customerIdType\" use=\"optional\"/>", replace:"       <xs:attribute name=\"customerId\" type=\"xp:customerIdType\" use=\"optional\"/>       \n            </xs:extension>       \n        </xs:complexContent>", byline:true)
    ant.replaceregexp(file:"build/generated/litleRecurring_v${versionSchema}.xsd", match:"name=\"recurringTransactionType\">", replace:"name=\"recurringTransactionType\">    \n        <xs:complexContent>    \n            <xs:extension base=\"xp:litleTransactionInterface\">    \n            </xs:extension>    \n        </xs:complexContent>")
    ant.replaceregexp(file:"build/generated/litleRecurring_v${versionSchema}.xsd", match:"name=\"recurringTransactionResponseType\">", replace:"name=\"recurringTransactionResponseType\">    \n        <xs:complexContent>    \n            <xs:extension base=\"xp:litleTransactionInterface\">", byline:true)
    ant.replaceregexp(file:"build/generated/litleRecurring_v${versionSchema}.xsd", match:"<xs:sequence>", replace:"        <xs:sequence>")
    ant.replaceregexp(file:"build/generated/litleRecurring_v${versionSchema}.xsd", match:"<xs:element name=\"litleTxnId\" type=\"xp:litleIdType\" />", replace:"         <xs:element name=\"litleTxnId\" type=\"xp:litleIdType\" />")
    ant.replaceregexp(file:"build/generated/litleRecurring_v${versionSchema}.xsd", match:"<xs:element name=\"response\" type=\"xp:responseType\" />", replace:"         <xs:element name=\"response\" type=\"xp:responseType\" />")
    ant.replaceregexp(file:"build/generated/litleRecurring_v${versionSchema}.xsd", match:"<xs:element name=\"message\" type=\"xs:string\" />", replace:"         <xs:element name=\"message\" type=\"xs:string\" />")
    ant.replaceregexp(file:"build/generated/litleRecurring_v${versionSchema}.xsd", match:"<xs:element name=\"responseTime\" type=\"xs:dateTime\" />", replace:"         <xs:element name=\"responseTime\" type=\"xs:dateTime\" />")
    ant.replaceregexp(file:"build/generated/litleRecurring_v${versionSchema}.xsd", match:"</xs:sequence>", replace:"        </xs:sequence>    \n            </xs:extension>    \n        </xs:complexContent>")
    ant.replaceregexp(file:"build/generated/litleRecurring_v${versionSchema}.xsd", match:"", replace:"")
    ant.replaceregexp(file:"build/generated/litleRecurring_v${versionSchema}.xsd", match:"", replace:"")
    ant.replaceregexp(file:"build/generated/litleTransaction_v${versionSchema}.xsd", match:"enumeration value=(.*?3dsAuthenticated.*?)/>", replace:"enumeration value=\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"AUTHENTICATED_3DS\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
    ant.replaceregexp(file:"build/generated/litleTransaction_v${versionSchema}.xsd", match:"enumeration value=(.*?3dsAttempted.*?)/>", replace:"enumeration value=\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"ATTEMPTED_3DS\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
    ant.replaceregexp(file:"build/generated/litleTransaction_v${versionSchema}.xsd", match:"(element name=\"customerType\" minOccurs=\"0\".*?<xs:simpleType>)", replace:"\\1<xs:annotation><xs:appinfo><jaxb:typesafeEnumClass name=\"CustomerType\"/></xs:appinfo></xs:annotation>", flags:"s")
    ant.replaceregexp(file:"build/generated/litleTransaction_v${versionSchema}.xsd", match:"(element name=\"residenceStatus\" minOccurs=\"0\".*?<xs:simpleType>)", replace:"\\1<xs:annotation><xs:appinfo><jaxb:typesafeEnumClass name=\"ResidenceStatus\"/></xs:appinfo></xs:annotation>", flags:"s")
    ant.replaceregexp(file:"build/generated/litleTransaction_v${versionSchema}.xsd", match:"(element name=\"deliveryType\" minOccurs=\"0\".*?default=\"TBD\".*?<xs:simpleType>)", replace:"\\1<xs:annotation><xs:appinfo><jaxb:typesafeEnumClass name=\"DeliveryType\"/></xs:appinfo></xs:annotation>", flags:"s")
    ant.replaceregexp(file:"build/generated/litleTransaction_v${versionSchema}.xsd", match:"(<xs:enumeration value=\"00\")\\s?+/>", replace:"\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"UNKNOWN\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
    ant.replaceregexp(file:"build/generated/litleTransaction_v${versionSchema}.xsd", match:"(<xs:enumeration value=\"01\")\\s?+/>", replace:"\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"FEDERAL_NATIONAL_SALES_TAX\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
    ant.replaceregexp(file:"build/generated/litleTransaction_v${versionSchema}.xsd", match:"(<xs:enumeration value=\"02\")\\s?+/>", replace:"\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"STATE_SALEX_TAX\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
    ant.replaceregexp(file:"build/generated/litleTransaction_v${versionSchema}.xsd", match:"(<xs:enumeration value=\"03\")\\s?+/>", replace:"\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"CITY_SALES_TAX\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
    ant.replaceregexp(file:"build/generated/litleTransaction_v${versionSchema}.xsd", match:"(<xs:enumeration value=\"04\")\\s?+/>", replace:"\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"LOCAL_SALES_TAX\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
    ant.replaceregexp(file:"build/generated/litleTransaction_v${versionSchema}.xsd", match:"(<xs:enumeration value=\"05\")\\s?+/>", replace:"\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"MUNICIPAL_SALES_TAX\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
    ant.replaceregexp(file:"build/generated/litleTransaction_v${versionSchema}.xsd", match:"(<xs:enumeration value=\"06\")\\s?+/>", replace:"\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"OTHER_TAX\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
    ant.replaceregexp(file:"build/generated/litleTransaction_v${versionSchema}.xsd", match:"(<xs:enumeration value=\"10\")\\s?+/>", replace:"\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"VALUE_ADDED_TAX\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
    ant.replaceregexp(file:"build/generated/litleTransaction_v${versionSchema}.xsd", match:"(<xs:enumeration value=\"11\")\\s?+/>", replace:"\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"GOODS_AND_SERVICES_TAX\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
    ant.replaceregexp(file:"build/generated/litleTransaction_v${versionSchema}.xsd", match:"(<xs:enumeration value=\"12\")\\s?+/>", replace:"\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"PROVINCIAL_SALES_TAX\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
    ant.replaceregexp(file:"build/generated/litleTransaction_v${versionSchema}.xsd", match:"(<xs:enumeration value=\"13\")\\s?+/>", replace:"\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"HARMONIZED_SALES_TAX\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
    ant.replaceregexp(file:"build/generated/litleTransaction_v${versionSchema}.xsd", match:"(<xs:enumeration value=\"14\")\\s?+/>", replace:"\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"QUEBEC_SALES_TAX\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
    ant.replaceregexp(file:"build/generated/litleTransaction_v${versionSchema}.xsd", match:"(<xs:enumeration value=\"20\")\\s?+/>", replace:"\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"ROOM_TAX\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
    ant.replaceregexp(file:"build/generated/litleTransaction_v${versionSchema}.xsd", match:"(<xs:enumeration value=\"21\")\\s?+/>", replace:"\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"OCCUPANCY_TAX\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
    ant.replaceregexp(file:"build/generated/litleTransaction_v${versionSchema}.xsd", match:"(<xs:enumeration value=\"22\")\\s?+/>", replace:"\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"ENERGY_TAX\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
    ant.replaceregexp(file:"build/generated/litleCommon_v${versionSchema}.xsd", match:"(<xs:enumeration value=\"\")\\s?+/>", replace:"\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"BLANK\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
    ant.replaceregexp(file:"build/generated/litleTransaction_v${versionSchema}.xsd", match:"(<xs:element name=\"echeckVerification.*?)<xs:all>(.*?)</xs:all>(.*?</xs:element)", replace:"\\1<xs:sequence>\\2</xs:sequence>\\3", flags:"s")
    ant.replaceregexp(file:"build/generated/litleTransaction_v${versionSchema}.xsd", match:"<xs:element ref=\"xp:echeckOrEcheckToken\"\\s?/>", replace:"<xs:choice><xs:element name=\"echeck\" type=\"xp:echeckType\"/><xs:element name=\"echeckToken\" type=\"xp:echeckTokenType\"/></xs:choice>", byline:true)
    ant.replaceregexp(file:"build/generated/litleTransaction_v${versionSchema}.xsd", match:"<xs:element ref=\"xp:echeckOrEcheckToken\" minOccurs=\"0\"\\s?/>", replace:"<xs:choice><xs:element name=\"echeck\" type=\"xp:echeckType\"/><xs:element name=\"echeckToken\" type=\"xp:echeckTokenType\"/></xs:choice>", byline:true)
    ant.replaceregexp(file:"build/generated/litleBatch_v${versionSchema}.xsd", match:"(<xs:attribute name=\"num\\w+\".*use=\"optional\".*)/>", replace:"\\1 default=\"0\"/>", byline:true)
    ant.replaceregexp(file:"build/generated/litleBatch_v${versionSchema}.xsd", match:"(<xs:attribute name=\"\\w+Amount\".*use=\"optional\".*)/>", replace:"\\1 default=\"0\"/>", byline:true)
}

task jaxbTask(dependsOn: 'replaceRegexp') {
    def jaxbTargetDir = "build/generated"
    doLast {
        ant.taskdef(name: "xjc", classname:"com.sun.tools.xjc.XJCTask", classpath:project.sourceSets.main.runtimeClasspath.asPath)
        ant.jaxbTargetDir = jaxbTargetDir
        ant.xjc(destdir:"${jaxbTargetDir}", package: "com.litle.sdk.generate", binding:"src/main/resources/xsd/bindings.xml", extension:'true'){
            schema(dir:"build/generated", includes:"litleOnline_v${versionSchema}.xsd,litleBatch_v${versionSchema}.xsd")
        }
    }
}

jar{
    def jar15Dir = file("${dist15}/lib")
    jar15Dir.mkdirs()
    manifest {
        attributes("Implementation-Title":"Litle SDK For Java 1.5 and greater", "Implementation-Version":"${versionJar}","Implementation-Vendor":"Litle&Co","Main-Class":"com.litle.sdk.Setup")
    }
    destinationDir = jar15Dir
    archiveName = "litle-sdk-for-java-${versionJar}.jar"
    exclude('**/xsd')
}

test{
    useJUnit()
    testClassesDir = file(project.sourceSets.test.output.classesDir)
    include '**/UnitSuite.class'
    reports.junitXml.destination = "$buildDir/test-results/test"
    reports.html.destination = "$buildDir/reports/tests/test"
}

task testFunctional(type:Test, dependsOn: compileFunctionalTestJava){
    useJUnit()
    classpath = project.sourceSets.functionalTest.runtimeClasspath
    mustRunAfter test
    testClassesDir = file(project.sourceSets.functionalTest.output.classesDir)
    include '**/FunctionalSuite.class'
    reports.junitXml.destination = "$buildDir/test-results/functional"
    reports.html.destination = "$buildDir/reports/tests/functional"
}

task testCertification(type:Test, dependsOn: compileCertificationTestJava){
    useJUnit()
    classpath = project.sourceSets.certificationTest.runtimeClasspath
    mustRunAfter testFunctional
    testClassesDir = file(project.sourceSets.certificationTest.output.classesDir)
    include '**/CertificationSuite.class'
    reports.junitXml.destination = "$buildDir/test-results/certification"
    reports.html.destination = "$buildDir/reports/tests/certification"
}

task doc(type:Javadoc, dependsOn: compileJava) {
    def docDir = file("$buildDir/kit/java15/doc")
    docDir.mkdirs()
    source = project.sourceSets.main.allJava
    destinationDir = docDir
    classpath = project.sourceSets.main.output
    classpath += project.sourceSets.main.compileClasspath
}


task copyJarToKit(type:Copy, dependsOn:[jar, doc]){
    def kitDir = file("$buildDir/kit/java15")
    kitDir.mkdirs()
    from "${dist15}/lib/litle-sdk-for-java-${versionJar}.jar"
    from "LICENSE"
    into kitDir
}

task copyLibsToKit(type:Copy, dependsOn:compileJava){
    def kitDependencyDir = file("$buildDir/kit/java15/dependencies")
    kitDependencyDir.mkdirs()
    from configurations.compile.asFileTree.matching{
        include '**/activation*'
        include '**/jaxb-api*'
        include '**/jaxb-impl*'
        include '**/jsr173*'
        include '**/commons-logging-1.1.1*'
        include '**/commons-codec*'
        include '**/fluent-hc*'
        include '**/httpclient*'
        include '**/httpcore*'
        include '**/httpmime*'
    }
    from ("${opensftp}"){
        include '**/*.jar'
    }
    into kitDependencyDir
}

task tarKit(type:Tar, dependsOn:[copyJarToKit, copyLibsToKit]){
    compression = Compression.GZIP
    destinationDir = file("$buildDir/kit")
    archiveName = "litle-sdk-for-java-${versionJar}.tar.gz"
    from "$buildDir/kit/java15"
}

task zipKit(type:Zip, dependsOn:[copyJarToKit, copyLibsToKit]){
    destinationDir = file("$buildDir/kit")
    archiveName = "litle-sdk-for-java-${versionJar}.zip"
    from "$buildDir/kit/java15"
}

task kit(dependsOn:[tarKit, zipKit]){
    
}

compileJava.dependsOn jaxbTask
check.dependsOn testCertification, testFunctional
build.dependsOn kit
